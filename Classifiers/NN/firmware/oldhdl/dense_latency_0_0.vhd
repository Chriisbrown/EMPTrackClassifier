-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dense_latency_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_3950 : STD_LOGIC_VECTOR (14 downto 0) := "011100101010000";
    constant ap_const_lv15_4116 : STD_LOGIC_VECTOR (14 downto 0) := "100000100010110";
    constant ap_const_lv15_7FD0 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010000";

    signal grp_product_2_fu_96_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_96_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call11 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_product_2_fu_104_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_104_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_112_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_112_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_120_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_120_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_128_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_128_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_136_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_136_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_144_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_144_ap_ce : STD_LOGIC;
    signal grp_product_2_fu_152_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_2_fu_152_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp2_trunc_ext_cast_fu_160_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_trunc8_ext_cast_fu_164_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_168_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_trunc_ext_cast_fu_178_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_trunc9_ext_cast_fu_182_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_fu_186_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp3_cast_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_cast_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_trunc_ext_cast_fu_202_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_trunc10_ext_cas_fu_206_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_fu_210_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_trunc_ext_cast_fu_220_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_fu_224_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_cast_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_trunc_ext_fu_234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_cast_fu_216_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_244_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_196_p2 : STD_LOGIC_VECTOR (15 downto 0);

    component product_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (14 downto 0);
        w_V : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_product_2_fu_96 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_0_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_96_ap_return,
        ap_ce => grp_product_2_fu_96_ap_ce);

    grp_product_2_fu_104 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_1_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_104_ap_return,
        ap_ce => grp_product_2_fu_104_ap_ce);

    grp_product_2_fu_112 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_2_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_112_ap_return,
        ap_ce => grp_product_2_fu_112_ap_ce);

    grp_product_2_fu_120 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_3_V_read,
        w_V => ap_const_lv15_3950,
        ap_return => grp_product_2_fu_120_ap_return,
        ap_ce => grp_product_2_fu_120_ap_ce);

    grp_product_2_fu_128 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_4_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_128_ap_return,
        ap_ce => grp_product_2_fu_128_ap_ce);

    grp_product_2_fu_136 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_5_V_read,
        w_V => ap_const_lv15_4116,
        ap_return => grp_product_2_fu_136_ap_return,
        ap_ce => grp_product_2_fu_136_ap_ce);

    grp_product_2_fu_144 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_6_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_144_ap_return,
        ap_ce => grp_product_2_fu_144_ap_ce);

    grp_product_2_fu_152 : component product_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        a_V => data_7_V_read,
        w_V => ap_const_lv15_0,
        ap_return => grp_product_2_fu_152_ap_return,
        ap_ce => grp_product_2_fu_152_ap_ce);




        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= std_logic_vector(unsigned(tmp4_fu_244_p2) + unsigned(tmp1_fu_196_p2));

    grp_product_2_fu_104_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_104_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_104_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_112_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_112_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_112_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_120_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_120_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_120_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_128_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_128_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_128_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_136_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_136_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_136_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_144_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_144_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_144_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_152_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_152_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_152_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_product_2_fu_96_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            grp_product_2_fu_96_ap_ce <= ap_const_logic_1;
        else 
            grp_product_2_fu_96_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_196_p2 <= std_logic_vector(signed(tmp3_cast_fu_192_p1) + signed(tmp2_cast_fu_174_p1));
        tmp2_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_168_p2),16));

    tmp2_fu_168_p2 <= std_logic_vector(signed(tmp2_trunc_ext_cast_fu_160_p1) + signed(tmp2_trunc8_ext_cast_fu_164_p1));
        tmp2_trunc8_ext_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_104_ap_return),15));

        tmp2_trunc_ext_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_96_ap_return),15));

        tmp3_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_186_p2),16));

    tmp3_fu_186_p2 <= std_logic_vector(signed(tmp3_trunc_ext_cast_fu_178_p1) + signed(tmp3_trunc9_ext_cast_fu_182_p1));
        tmp3_trunc9_ext_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_120_ap_return),15));

        tmp3_trunc_ext_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_112_ap_return),15));

    tmp4_fu_244_p2 <= std_logic_vector(unsigned(tmp6_fu_238_p2) + unsigned(tmp5_cast_fu_216_p1));
        tmp5_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_210_p2),16));

    tmp5_fu_210_p2 <= std_logic_vector(signed(tmp5_trunc_ext_cast_fu_202_p1) + signed(tmp5_trunc10_ext_cas_fu_206_p1));
        tmp5_trunc10_ext_cas_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_136_ap_return),15));

        tmp5_trunc_ext_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_128_ap_return),15));

    tmp6_fu_238_p2 <= std_logic_vector(signed(tmp7_cast_fu_230_p1) + signed(tmp6_trunc_ext_fu_234_p1));
        tmp6_trunc_ext_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_144_ap_return),16));

        tmp7_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_224_p2),16));

    tmp7_fu_224_p2 <= std_logic_vector(signed(tmp7_trunc_ext_cast_fu_220_p1) + signed(ap_const_lv15_7FD0));
        tmp7_trunc_ext_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_product_2_fu_152_ap_return),15));

end behav;
